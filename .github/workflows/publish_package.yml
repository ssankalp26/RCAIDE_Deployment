name: Release Workflow

on:
  push:
    branches:
      - master
      - develop

permissions:
  contents: write
  pull-requests: write
  packages: write

jobs:
  bump-version:
    runs-on: ubuntu-latest

    steps:
      - name: Check Out Code
        uses: actions/checkout@v3

      - name: Get Current Version
        id: get_version
        run: |
          if [ ! -f version.txt ]; then
            echo "version.txt file not found!"
            exit 1
          fi
          old_version=$(cat version.txt)
          echo "old_version=$old_version" >> "$GITHUB_ENV"

      - name: Bump Version
        id: bump_version
        run: |
          old_version=$(cat version.txt)
          IFS='.' read -r major minor patch <<< "$old_version"

          # Increment based on branch
          if [ "${GITHUB_REF}" = "refs/heads/develop" ]; then
            patch=$((patch + 1))
          elif [ "${GITHUB_REF}" = "refs/heads/master" ]; then
            minor=$((minor + 1))
            patch=0
          fi

          new_version="$major.$minor.$patch"
          echo "$new_version" > version.txt
          echo "new_version=$new_version" >> "$GITHUB_ENV"
          echo "new_version=$new_version" >> "$GITHUB_OUTPUT"

      - name: Commit and Push Updated Version
        if: steps.bump-version.outcome == 'success'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add version.txt
          git commit -m "Bump version to ${{ env.new_version }} [skip ci]"
          git push origin HEAD:${{ github.ref_name }}

  create-release:
    needs: bump-version
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'

    steps:
      - name: Get New Version
        run: |
          echo "new_version=${{ needs.bump-version.outputs.new_version }}" >> "$GITHUB_ENV"

      - name: Create GitHub Release
        uses: actions/create-release@v1
        with:
          tag_name: v${{ env.new_version }}
          release_name: Release ${{ env.new_version }}
          body: |
            ## Changelog
            - Incremented version to ${{ env.new_version }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-pypi:
    needs: create-release
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'

    steps:
      - name: Check Out Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Verify Release Version
        run: |
          if [ ! -f version.txt ]; then
            echo "version.txt not found!"
            exit 1
          fi
          release_version=$(cat version.txt)
          echo "Release version: $release_version"

      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade build twine

      - name: Build Package
        run: |
          python -m build

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          twine upload dist/*

  merge-master-to-develop:
    needs: [bump-version, publish-pypi]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'

    steps:
      - name: Check Out Code
        uses: actions/checkout@v3

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Merge master into develop
        run: |
          git fetch origin
          git checkout develop
          git merge origin/master --allow-unrelated-histories -m "Auto-merge master into develop"
          git push origin develop