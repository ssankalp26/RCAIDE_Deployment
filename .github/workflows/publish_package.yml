name: Release Workflow

on:
  push:
    branches:
      - develop
      - master

permissions:
  contents: write
  pull-requests: write

jobs:
  bump-version:
    runs-on: ubuntu-latest

    steps:
      - name: Check Out Code
        uses: actions/checkout@v3

      - name: Get Current Version
        id: get_version
        run: |
          if [ ! -f version.txt ]; then
            echo "version.txt file not found!"
            exit 1
          fi
          old_version=$(cat version.txt)
          echo "old_version=$old_version" >> "$GITHUB_ENV"

      - name: Bump Version
        id: bump_version
        run: |
          old_version=$(cat version.txt)

          # Split the version into major, minor, and patch
          IFS='.' read -r major minor patch <<< "$old_version"

          # Decide whether to increment patch (develop) or minor (master)
          if [ "${GITHUB_REF}" = "refs/heads/develop" ]; then
            patch=$((patch + 1))
          elif [ "${GITHUB_REF}" = "refs/heads/master" ]; then
            minor=$((minor + 1))
            patch=0
          fi

          # Construct new version
          new_version="$major.$minor.$patch"

          # Update version in version.txt
          echo "$new_version" > version.txt

          # Export new version for use in subsequent steps
          echo "new_version=$new_version" >> "$GITHUB_ENV"

      - name: Commit and Push Updated Version
        if: steps.bump_version.outcome == 'success'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git add version.txt
          git commit -m "Bump version to ${{ env.new_version }} [skip ci]"
          git push origin HEAD:${{ github.ref_name }}

  publish-pypi:
    needs: bump-version
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'

    steps:
      - name: Check Out Code
        uses: actions/checkout@v3

      - name: Verify Updated Version
        run: |
          if [ ! -f version.txt ]; then
            echo "version.txt not found!"
            exit 1
          fi
          echo "Version to publish: $(cat version.txt)"

      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade build twine

      - name: Build Package
        run: |
          python -m build

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          twine upload dist/*

  merge-master-to-develop:
    needs: [bump-version, publish-pypi]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'

    steps:
      - name: Check Out Code
        uses: actions/checkout@v3

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Merge master into develop
        run: |
          git fetch origin
          git checkout develop
          git pull origin develop
          git merge origin/master -m "Auto-merge master into develop"
          git push origin develop
